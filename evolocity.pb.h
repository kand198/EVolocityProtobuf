/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_EVOLOCITY_PB_H_INCLUDED
#define PB_EVOLOCITY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _VehicleType { 
    VehicleType_OTHER = 0, 
    VehicleType_BIKE = 1, 
    VehicleType_TRIKE = 2, 
    VehicleType_KART = 3 
} VehicleType;

typedef enum _VehicleClass { 
    VehicleClass_STANDARD = 0, 
    VehicleClass_OPEN = 1, 
    VehicleClass_COMPETITION = 2 
} VehicleClass;

typedef enum _EnergyRequestType { 
    EnergyRequestType_ALL = 0, 
    EnergyRequestType_TIMESTAMP = 1 
} EnergyRequestType;

/* Struct definitions */
typedef struct _ConfigRequest { 
    char dummy_field;
} ConfigRequest;

typedef struct _EnergyResponse { 
    pb_callback_t frames; 
} EnergyResponse;

typedef struct _ConfigResponse { 
    int32_t serial_number; 
    int32_t team_number; 
    bool has_vehicle_type;
    VehicleType vehicle_type; 
    bool has_vehicle_class;
    VehicleClass vehicle_class; 
} ConfigResponse;

typedef struct _EnergyFrame { 
    uint32_t end_timestamp; 
    int32_t average_voltage; 
    int32_t average_current; 
} EnergyFrame;

typedef struct _TimestampPair { 
    uint32_t start_timestamp; 
    uint32_t end_timestamp; 
} TimestampPair;

typedef struct _EnergyRequest { 
    bool has_timestamp_pair;
    TimestampPair timestamp_pair; 
} EnergyRequest;


/* Helper constants for enums */
#define _VehicleType_MIN VehicleType_OTHER
#define _VehicleType_MAX VehicleType_KART
#define _VehicleType_ARRAYSIZE ((VehicleType)(VehicleType_KART+1))

#define _VehicleClass_MIN VehicleClass_STANDARD
#define _VehicleClass_MAX VehicleClass_COMPETITION
#define _VehicleClass_ARRAYSIZE ((VehicleClass)(VehicleClass_COMPETITION+1))

#define _EnergyRequestType_MIN EnergyRequestType_ALL
#define _EnergyRequestType_MAX EnergyRequestType_TIMESTAMP
#define _EnergyRequestType_ARRAYSIZE ((EnergyRequestType)(EnergyRequestType_TIMESTAMP+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ConfigRequest_init_default               {0}
#define ConfigResponse_init_default              {0, 0, false, _VehicleType_MIN, false, _VehicleClass_MIN}
#define EnergyFrame_init_default                 {0, 0, 0}
#define TimestampPair_init_default               {0, 0}
#define EnergyRequest_init_default               {false, TimestampPair_init_default}
#define EnergyResponse_init_default              {{{NULL}, NULL}}
#define ConfigRequest_init_zero                  {0}
#define ConfigResponse_init_zero                 {0, 0, false, _VehicleType_MIN, false, _VehicleClass_MIN}
#define EnergyFrame_init_zero                    {0, 0, 0}
#define TimestampPair_init_zero                  {0, 0}
#define EnergyRequest_init_zero                  {false, TimestampPair_init_zero}
#define EnergyResponse_init_zero                 {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define EnergyResponse_frames_tag                1
#define ConfigResponse_serial_number_tag         1
#define ConfigResponse_team_number_tag           2
#define ConfigResponse_vehicle_type_tag          3
#define ConfigResponse_vehicle_class_tag         4
#define EnergyFrame_end_timestamp_tag            1
#define EnergyFrame_average_voltage_tag          2
#define EnergyFrame_average_current_tag          3
#define TimestampPair_start_timestamp_tag        1
#define TimestampPair_end_timestamp_tag          2
#define EnergyRequest_timestamp_pair_tag         1

/* Struct field encoding specification for nanopb */
#define ConfigRequest_FIELDLIST(X, a) \

#define ConfigRequest_CALLBACK NULL
#define ConfigRequest_DEFAULT NULL

#define ConfigResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    serial_number,     1) \
X(a, STATIC,   SINGULAR, INT32,    team_number,       2) \
X(a, STATIC,   OPTIONAL, UENUM,    vehicle_type,      3) \
X(a, STATIC,   OPTIONAL, UENUM,    vehicle_class,     4)
#define ConfigResponse_CALLBACK NULL
#define ConfigResponse_DEFAULT NULL

#define EnergyFrame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   end_timestamp,     1) \
X(a, STATIC,   SINGULAR, INT32,    average_voltage,   2) \
X(a, STATIC,   SINGULAR, INT32,    average_current,   3)
#define EnergyFrame_CALLBACK NULL
#define EnergyFrame_DEFAULT NULL

#define TimestampPair_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   start_timestamp,   1) \
X(a, STATIC,   SINGULAR, UINT32,   end_timestamp,     2)
#define TimestampPair_CALLBACK NULL
#define TimestampPair_DEFAULT NULL

#define EnergyRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timestamp_pair,    1)
#define EnergyRequest_CALLBACK NULL
#define EnergyRequest_DEFAULT NULL
#define EnergyRequest_timestamp_pair_MSGTYPE TimestampPair

#define EnergyResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  frames,            1)
#define EnergyResponse_CALLBACK pb_default_field_callback
#define EnergyResponse_DEFAULT NULL
#define EnergyResponse_frames_MSGTYPE EnergyFrame

extern const pb_msgdesc_t ConfigRequest_msg;
extern const pb_msgdesc_t ConfigResponse_msg;
extern const pb_msgdesc_t EnergyFrame_msg;
extern const pb_msgdesc_t TimestampPair_msg;
extern const pb_msgdesc_t EnergyRequest_msg;
extern const pb_msgdesc_t EnergyResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ConfigRequest_fields &ConfigRequest_msg
#define ConfigResponse_fields &ConfigResponse_msg
#define EnergyFrame_fields &EnergyFrame_msg
#define TimestampPair_fields &TimestampPair_msg
#define EnergyRequest_fields &EnergyRequest_msg
#define EnergyResponse_fields &EnergyResponse_msg

/* Maximum encoded size of messages (where known) */
/* EnergyResponse_size depends on runtime parameters */
#define ConfigRequest_size                       0
#define ConfigResponse_size                      26
#define EnergyFrame_size                         28
#define EnergyRequest_size                       14
#define TimestampPair_size                       12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
